{% set name = "python-pkcs11" %}
{% set version = "0.7.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 9737e0c24cabb8bc9d48bf8c57c3df2a70f8cdd96b70c50290803286f9e46bf7
  patches:
    - 0001-use-aenum-py-lt-36.diff  # [py<36]

build:
  number: 0
  skip: true  # [win]
  script: "{{ PYTHON }} -m pip install . --no-deps -vv"

requirements:
  build:
    - {{ compiler('c') }}
  host:
    - cython
    - python
    - pip
    - setuptools_scm
  run:
    - python
    - aenum >=2.0.7,<3  # [py<36]
    - asn1crypto
    - cached-property >=1.3.0,<2

test:
  imports:
    - pkcs11
    - pkcs11.constants
    - pkcs11.mechanisms
    - pkcs11.exceptions
    - pkcs11.util
    - pkcs11.util.rsa
    - pkcs11.util.dsa
    - pkcs11.util.dh
    - pkcs11.util.ec
    - pkcs11.util.x509

about:
  home: http://python-pkcs11.readthedocs.io/
  license: MIT
  license_file: README.rst
  license_family: MIT
  summary: 'A high level Python interface to the PKCS#11 (Cryptoki) standard to support HSM and Smartcard devices'

  description: |
    A high level, "more Pythonic" interface to the PKCS#11 (Cryptoki) standard to support
    HSM and Smartcard devices in Python.
    The interface is designed to follow the logical structure of a HSM, with useful
    defaults for obscurely documented parameters. Many APIs will optionally accept
    iterables and act as generators, allowing you to stream large data blocks for
    symmetric encryption.
  doc_url: http://python-pkcs11.readthedocs.io/en/latest/
  dev_url: https://github.com/danni/python-pkcs11

extra:
  recipe-maintainers:
    - sodre
